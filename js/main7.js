// ------------------–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞-------------------

// const fnA = function (massage, callback) {
//   console.log(massage);

//   console.log(callback);

//   callback(100);
// };

// const fnB = function (number) {
//   console.log(`–≠—Ç–æ –ª–æ–≥ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ fnB !!!!!!!!!!`, number);
// };

// fnA("wfwfwe", fnB);

// -------------------------------------------------------------

// const doMath = function (a, b, callback) {
//   const result = callback(a, b);

//   console.log(result);
// };

// const add = function (x, y) {
//   return x + y;
// };

// const sub = function (x, y) {
//   return x - y;
// };

// doMath(2, 3, add);
// doMath(10, 3, sub);
// ------------------------–õ–∏—Ç–µ—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏-------------------

// const doMath = function (a, b, callback) {
//   const result = callback(a, b);

//   console.log(result);
// };

// doMath(2, 3, function (x, y) {
//   return x + y;
// });
// doMath(10, 3, function (x, y) {
//   return x - y;
// });

// ------------------------–†–ï–ì–ï–°–¢–†–ê–¶–ò–Ø –°–û–ë–´–¢–ò–ô-----------------------------------

// const button = document.querySelector(".btn");

// const handleButtonClik = function () {
//   console.log("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ");
// };

// button.addEventListener("click", handleButtonClik);

// console.dir(button);
// ---------------------------------------------------------

// const onGatPositionSuccess = function (position) {
//   console.log("–≠—Ç–æ –º–æ–µ –º–µ—Å—Ç–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ");
//   console.log(position);
// };

// const onGatPositionErroer = function (error) {
//   console.log(error);
// };

// window.navigator.geolocation.getCurrentPosition(
//   onGatPositionSuccess,
//   onGatPositionErroer
// );
// -------------------------------------------------------

// const callback = function () {
//   console.log("–ß–µ—Ä–µ–∑ 3 —Å–µ–∫ –≤ –Ω—É—Ç—Ä–∏ –∫–æ–ª–±–µ–∫–∞ –≤ —Ç–∞–π–º–∞—É—Ç–µ");
// };

// console.log("–í –∫–æ–Ω—Ü–µ –ø–µ—Ä–µ–¥ —Ç–∞–π–º–∞—É—Ç–æ–º");

// setTimeout(callback, 2000);

// console.log("–í –∫–æ–¥–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞");

// -----------------–§–∏–ª—å—Ç–µ—Ä –¥–ª—è –º–∞—Å–∏–≤–∞-------------------------------

// const filter = function (arr, test) {
//   const filteredArr = [];

//   for (const el of arr) {
//     const passed = test(el);

//     if (passed) {
//       filteredArr.push(el);
//     }
//   }
//   return filteredArr;
// };

// const callBack1 = function (value) {
//   return value >= 3;
// };

// console.log(filter([1, 2, 3, 4, 5], callBack1));

// // –ª–∏—Ç–µ—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏ + –∞–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
// console.log(
//   filter([1, 2, 3, 4, 5, 6, 7, 8, 9], function (value) {
//     return value <= 3;
//   })
// );
// // —Ñ–∏–ª—å—Ç–µ—Ä –¥–ª—è —Ñ—Ä—É–∫—Ç–æ–≤------------
// const fruts = [
//   { name: "apple", quantity: 250, iFresh: true },
//   { name: "grapse", quantity: 150, iFresh: true },
//   { name: "bananse", quantity: 100, iFresh: true },
// ];

// const filterFruts = function (frut) {
//   return frut.quantity >= 150;
// };

// console.log(filter(fruts, filterFruts));

// -------------–ó–∞–º—ã–∫–∞–Ω–∏–µ------------------------------

// const fnA = function (parameter) {
//   const innerVaribl = "–ó–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏–Ω–µ–π–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤—É–Ω–∫—Ü–∏–∏ fnA";

//   const innerFunction = function () {
//     console.log(parameter);
//     console.log(innerVaribl);
//     console.log("–≠—Ç–æ –≤—ã–∑–æ–≤ innerFunction");
//   };
//   return innerFunction;
// };

// const fnB = fnA(555);

// fnB();

// console.log(fnB);

// ---------------------------------------------------------

// const makeSheff = function (name) {
//   const massage = "Hello";
//   const makeDish = function (dish) {
//     console.log(massage);
//     console.log(`${name} –≥–æ—Ç–æ–≤–∏—Ç ${dish}`);
//   };

//   return makeDish;
// };

// const mango = makeSheff("Mango");
// console.dir(mango);

// mango("–ö–æ—Ç–ª–µ—Ç–∫–∞");
// mango("–∫–æ—Ñ–µ");

// const polly = makeSheff("Polly");

// console.dir(polly);

// polly("–ü–∏—Ä–æ–∂–æ–∫");
// polly("–†—ã–±–∞");

// --------------------------------------------------------

// const myLibFactory = function () {
//   let value = 0;

//   const add = function (num) {
//     value += num;
//   };

//   return {
//     add,
//     getValue() {
//       return value;
//     },
//   };
// };

// const myLib = myLibFactory();

// console.log(myLib);

// myLib.add(10);

// console.log(myLib.getValue());

// ---------–°–ò–ù–¢–ê–ö–°–ò–° –°–¢–†–ï–õ–û–ß–ù–´–• –§–£–ù–ö–¶–ò–ô------------------------

// const add = (a, b, c) => {
//   console.log(a, b, c);

//   return a + b + c;
// };
// // -------------—Å–ø–æ—Å–æ–± 2--------------------

// const add2 = (a, b, c) => a + b + c;

// console.log(add(5, 10, 15));

// console.log(add2(5, 10, 15));

// ------------------------–°—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ –æ–±–µ–∫—Ç–µ----------------------------------------

// const user = {
//   fullName: "Mango",
//   showName() {
//     console.log("this:", this);
//     console.log("this fullName:", this.fullName);

//     const inner = () => {
//       console.log("this is inner:", this);
//     };

//     inner();
//   },
// };

// user.showName();

// ------------------------------------------------------------

// const objA = {
//   x: 5,
//   showX() {
//     console.log(this.x);

//     const objB = {
//       y: 10,
//       showThis() {
//         console.log("showThis objB:", this.y);
//       },
//     };
//     objB.showThis();
//   },
// };

// objA.showX();
// -------------------------------------------------------------

// Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏
// –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:

// createProduct(obj, callback) - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ id, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–±–µ–∫.
// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –æ–±—å–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞, –¥–æ–±–∞–≤–ª—è—è –µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Å–≤–æ–π—Å—Ç–≤–æ id –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—å–µ–∫—Ç.
// logProduct(product) - –∫–æ–ª–ª–±–µ–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—å–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É—é—â–∏–π –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–ª–±–µ–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—å–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É—é—â–∏–π –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

// // –†–µ—à–µ–Ω–∏–µ
// function createProduct(partialProduct, callback) {
//   const product = { id: Date.now(), ...partialProduct };

//   callback(product);
// }

// const logProduct = (product) => console.log(product);

// const logTotalPrice = (product) =>
//   console.log(product.price * product.quantity);

// createProduct({ name: "üçé", price: 30, quantity: 3 }, logProduct);
// createProduct({ name: "üçã", price: 20, quantity: 5 }, logTotalPrice);
// -----------------------------------------------------------------------

// Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏
// –î–æ–±–∞–≤—å—Ç–µ –æ–±—ä–µ–∫—Ç—É account –º–µ—Ç–æ–¥—ã withdraw(amount, onSuccess, onError) –∏ deposit(amount, onSuccess, onError),
//     –≥–¥–µ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —ç—Ç–æ —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç–∏–π - –∫–æ–ª–±–µ–∫–∏.

// –ú–µ—Ç–æ–¥ withdraw –≤—ã–∑—ã–≤–∞–µ—Ç onError –µ—Å–ª–∏ amount –±–æ–ª—å—à–µ TRANSACTION_LIMIT –∏–ª–∏ this.balance, –∏ onSuccess –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

// –ú–µ—Ç–æ–¥ deposit –≤—ã–∑—ã–≤–∞–µ—Ç onError –µ—Å–ª–∏ amount –±–æ–ª—å—à–µ TRANSACTION_LIMIT –∏–ª–∏ –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–µ–Ω –Ω—É–ª—é, –∏ onSuccess –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

// –†–µ—à–µ–Ω–∏–µ
// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: "Jacob",
//   balance: 400,

//   withdraw(amount, onSuccess, onError) {
//     amount > TRANSACTION_LIMIT || amount > this.balance
//       ? onError("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ !!!")
//       : onSuccess("–í—Å–µ –≥–æ—Ç–æ–≤–æ !");
//   },

//   deposit(amount, onSuccess, onError) {
//     amount > TRANSACTION_LIMIT || amount <= 0
//       ? onError("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ !!!")
//       : onSuccess("–í—Å–µ –≥–æ—Ç–æ–≤–æ !");
//   },
// };

// function handleSuccess(message) {
//   console.log(`‚úÖ Success! ${message}`);
// }
// function handleError(message) {
//   console.log(`‚ùå Error! ${message}`);
// }

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

// -------------------------------------------------------------------------

// Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏
// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é each(array, callback), –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤,
//     –∞ –≤—Ç–æ—Ä—ã–º - —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞.–§—É–Ω–∫—Ü–∏—è each –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤,
//         —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–∑–æ–≤–∞ –∫–æ–ª–ª–±–µ–∫–∞.

// –†–µ—à–µ–Ω–∏–µ
// const each = (array, callback) => array.map(callback);

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value * 2;
//   })
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value - 10;
//   })
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return Math.sqrt(value);
//   })
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
//   })
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   })
// );

// -------------------------------------------------------------------------------

// Example 4 - –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// const createProduct = (partialProduct, callback) => {
//   const product = { id: Date.now(), ...partialProduct };
//   callback(product);
// };

// createProduct({ name: "üçé", price: 30, quantity: 3 }, (product) =>
//   console.log(product)
// );

// createProduct({ name: "üçã", price: 20, quantity: 5 }, (product) =>
//   console.log(product.price * product.quantity)
// );

// --------------------------------------------------------------------

// Example 5 - –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: 'Jacob',
//   balance: 400,
//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//     } else if (amount > this.balance) {
//       onError(`Amount can't exceed account balance of ${this.balance} credits`);
//     } else {
//       this.balance -= amount;
//       onSuccess(`Account balance: ${this.balance}`);
//     }
//   },
//   deposit(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//     } else if (amount <= 0) {
//       onError(`Amount must be more than 0 credits`);
//     } else {
//       this.balance += amount;
//       onSuccess(`Account balance: ${this.balance}`);
//     }
//   },
// };

// const handleSuccess =(message) => {
//   console.log(`‚úÖ Success! ${message}`);
// }
// const handleError=(message) =>{
//   console.log(`‚ùå Error! ${message}`);
// }

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

// ----------------------------------------------------------------

// Example 6 - –ò–Ω–ª–∞–π–Ω —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// const each = (array, callback) => {
//   const newArr = [];
//   for (const el of array) {
//     newArr.push(callback(el));
//   }
//   return newArr;
// };

// console.log(each([64, 49, 36, 25, 16], (value) => value * 2));
// console.log(each([64, 49, 36, 25, 16], (value) => value - 10));
// console.log(each([64, 49, 36, 25, 16], (value) => Math.sqrt(value)));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.ceil(value)));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.floor(value)));

// -------------------------------------------------------------------

// Example 7 - –ú–µ—Ç–æ–¥ forEach
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ forEach –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// const logItems = (items) => {

//   items.forEach((element, index) => {
//     console.log(`${index + 1} - ${element}`);
//   });

// };

// logItems(["Mango", "Poly", "Ajax"]);
// logItems(["üçé", "üçá", "üçë", "üçå", "üçã"]);

// -------------------------------------------------------------

// Example 8 - –ú–µ—Ç–æ–¥ forEach
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ forEach –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// const printContactsInfo = ({ names, phones }) => {
//   const nameList = names.split(",");

//   const phoneList = phones.split(",");

//   nameList.forEach((element, index) => {
//     console.log(`${element}: ${phoneList[index]}`);
//   });
// };

// printContactsInfo({
//   names: "Jacob,William,Solomon,Artemis",
//   phones: "89001234567,89001112233,890055566377,890055566300",
// });

// -------------------------------------------------------------------------

// Example 9 - –ú–µ—Ç–æ–¥ forEach
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ forEach –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// const cal—ÅulateAverage = (...args) => {
//   let total = 0;

//   args.forEach((element) => {
//     total += element;
//   });

//   return total / args.length;
// };

// console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
// console.log(cal—ÅulateAverage(14, 8, 2)); // 8
// console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2

// -----------------------------------------------------------------------

// const processCall = (recipient, onAvailable, onNotAvailable) => {
//   const isRecipientAvailable = Math.random() > 0.5;

//   console.log(isRecipientAvailable);

//   if (!isRecipientAvailable) {
//     onAvailable(recipient);
//     return;
//   }
//   onNotAvailable(recipient);
// };

// const Autoresponder = (name) =>
//   console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);

// const callAccepted = (name) => console.log(`–°–æ–µ–¥–∏–Ω—è–µ–º —Å ${name}, –æ–∂–∏–¥–∞–π—Ç–µ...`);

// function leaveHoloMessage(name) {
//   console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ–≥—Ä–∞–º–º—É.`);
// }

// processCall("Mango", callAccepted, Autoresponder);
// processCall("Loly", callAccepted, leaveHoloMessage);

// --------------------------------------------------------------------

// const pizzaPalace = {
//   pizzas: ["Ultracheese", "Smoked", "Four meats"],

//   order(pizzaName, onSuccess, onError) {
//     if (this.pizzas.includes(pizzaName)) {
//       return onSuccess(pizzaName);
//     }
//     return onError(pizzaName);
//   },
// };

// function makePizza(pizzaName) {
//   return `Your order is accepted. Cooking pizza ${pizzaName}.`;
// }

// function onOrderError(error) {
//   return `Error! ${error}`;
// }
// console.log(pizzaPalace.order("Big Mike", makePizza, onOrderError));
// console.log(pizzaPalace.order("Four meats", makePizza, onOrderError));
// console.log(pizzaPalace.order("Big Mike", makePizza, onOrderError));
// console.log(pizzaPalace.order("Vienna", makePizza, onOrderError));
// --------------------------------------------------------------------------

// function getCommonElements(firstArray, secondArray) {
//   console.log(firstArray);
//   const commonElements = [];

//   firstArray.forEach((el) => {
//     if (secondArray.includes(el)) {
//       commonElements.push(el);
//     }
//   });

//   return commonElements;
// }

// console.log(getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27]));

// ----------------------------------------------------------------------
